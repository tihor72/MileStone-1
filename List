using System;
using System.Collections.Generic;
using System.Linq;

namespace MS_Practice_Collections
{
    public class Animal
    {
        public int AnimalId { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public int Age { get; set; }

        public Animal()
        {
            Name = "";
            Type = "";
        }
    }

    public class AnimalManager
    {
        private List<Animal> animals = new List<Animal>();

        public void AddAnimal(Animal animal)
        {
            bool exists = animals.Exists(a => a.AnimalId == animal.AnimalId);
            if (exists)
            {
                Console.WriteLine("An animal with ID " + animal.AnimalId + " already exists.");
                return;
            }

            animals.Add(animal);
            Console.WriteLine("Animal added successfully.");
        }

        public void EditAnimal(int animalId, string newName, string newType, int newAge)
        {
            var animal = animals.FirstOrDefault(a => a.AnimalId == animalId);
            if (animal != null)
            {
                animal.Name = newName;
                animal.Type = newType;
                animal.Age = newAge;
                Console.WriteLine("Animal details updated successfully.");
            }
            else
            {
                Console.WriteLine("No animal found with ID " + animalId + ".");
            }
        }

        public void SearchByName(string name)
        {
            var foundAnimals = animals.Where(a => a.Name.Equals(name, StringComparison.OrdinalIgnoreCase)).ToList();
            if (foundAnimals.Count > 0)
            {
                foreach (var a in foundAnimals)
                {
                    Console.WriteLine($"ID: {a.AnimalId}, Name: {a.Name}, Type: {a.Type}, Age: {a.Age}");
                }
            }
            else
            {
                Console.WriteLine("No animal found with name '" + name + "'.");
            }
        }

        public void ListAnimals()
        {
            if (animals.Count > 0)
            {
                Console.WriteLine("Animal List:");
                foreach (var a in animals)
                {
                    Console.WriteLine($"ID: {a.AnimalId}, Name: {a.Name}, Type: {a.Type}, Age: {a.Age}");
                }
            }
            else
            {
                Console.WriteLine("No animals in the list.");
            }
        }

        public void SortAsc()
        {
            animals.Sort((a, b) => a.Name.CompareTo(b.Name));
            Console.WriteLine("Animals sorted by name in ascending order.");
        }

        public void Update(int id, string name, int age)
        {
            var animal = animals.FirstOrDefault(a => a.AnimalId == id);
            if (animal != null)
            {
                animal.Name = name;
                animal.Age = age;
                Console.WriteLine("Animal updated successfully.");
            }
            else
            {
                Console.WriteLine("Animal not found.");
            }
        }

        public void DeleteById(int id)
        {
            var animal = animals.FirstOrDefault(a => a.AnimalId == id);
            if (animal != null)
            {
                animals.Remove(animal);
                Console.WriteLine("Animal deleted successfully.");
            }
            else
            {
                Console.WriteLine("Animal not found.");
            }
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            AnimalManager manager = new AnimalManager();
            bool exit = false;

            while (!exit)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Animal");
                Console.WriteLine("2. Edit Animal by ID");
                Console.WriteLine("3. Search Animal by Name");
                Console.WriteLine("4. List All Animals");
                Console.WriteLine("5. Sort Animals by Name");
                Console.WriteLine("6. Update Animal Name and Age");
                Console.WriteLine("7. Delete Animal by ID");
                Console.WriteLine("8. Exit");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        Console.Write("Enter Animal ID: ");
                        int id = int.Parse(Console.ReadLine());

                        Console.Write("Enter Animal Name: ");
                        string name = Console.ReadLine();

                        Console.Write("Enter Animal Type: ");
                        string type = Console.ReadLine();

                        Console.Write("Enter Animal Age: ");
                        int age = int.Parse(Console.ReadLine());

                        Animal animal = new Animal { AnimalId = id, Name = name, Type = type, Age = age };
                        manager.AddAnimal(animal);
                        break;

                    case "2":
                        Console.Write("Enter Animal ID to edit: ");
                        int editId = int.Parse(Console.ReadLine());

                        Console.Write("Enter new name: ");
                        string newName = Console.ReadLine();

                        Console.Write("Enter new type: ");
                        string newType = Console.ReadLine();

                        Console.Write("Enter new age: ");
                        int newAge = int.Parse(Console.ReadLine());

                        manager.EditAnimal(editId, newName, newType, newAge);
                        break;

                    case "3":
                        Console.Write("Enter name to search: ");
                        string searchName = Console.ReadLine();
                        manager.SearchByName(searchName);
                        break;

                    case "4":
                        manager.ListAnimals();
                        break;

                    case "5":
                        manager.SortAsc();
                        break;

                    case "6":
                        Console.Write("Enter Animal ID to update: ");
                        int updateId = int.Parse(Console.ReadLine());

                        Console.Write("Enter new name: ");
                        string updateName = Console.ReadLine();

                        Console.Write("Enter new age: ");
                        int updateAge = int.Parse(Console.ReadLine());

                        manager.Update(updateId, updateName, updateAge);
                        break;

                    case "7":
                        Console.Write("Enter Animal ID to delete: ");
                        int deleteId = int.Parse(Console.ReadLine());
                        manager.DeleteById(deleteId);
                        break;

                    case "8":
                        exit = true;
                        Console.WriteLine("Exiting program...");
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Try again.");
                        break;
                }
            }
        }
    }
}
