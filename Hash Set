using System;
using System.Collections.Generic;


namespace MS_Practice_Collections
{
    // Uncomment the code below to use the Animal and AnimalManager classes with IEquatable interface
    // With Sort and Search functionality


    public class Animal : IEquatable<Animal>
    {
        public int AnimalId { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public int Age { get; set; }

        public Animal()
        {
            Name = "";
            Type = "";
        }

        public bool Equals(Animal other)
        {
            if (other == null) return false;
            return this.AnimalId == other.AnimalId;
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Animal);
        }

        public override int GetHashCode()
        {
            return AnimalId.GetHashCode();
        }
    }

    public class AnimalManager
    {
        private HashSet<Animal> animals = new HashSet<Animal>();//Probably create property

        public void AddAnimal(Animal animal)
        {
            if (!animals.Add(animal))
            {
                Console.WriteLine("An animal with ID " + animal.AnimalId + " already exists.");
            }
            else
            {
                Console.WriteLine("Animal added successfully.");
            }
        }

        public void EditAnimal(int animalId, string newName, string newType, int newAge)
        {
            Animal dummy = new Animal { AnimalId = animalId };
            Animal existing = null;

            foreach (Animal a in animals)
            {
                if (a.Equals(dummy))
                {
                    existing = a;
                    break;
                }
            }

            if (existing != null)
            {
                existing.Name = newName;
                existing.Type = newType;
                existing.Age = newAge;
                Console.WriteLine("Animal details updated successfully.");
            }
            else
            {
                Console.WriteLine("No animal found with ID " + animalId + ".");
            }
        }

        public void SortAnimalsByName()
        {
            List<Animal> sorted = animals.OrderBy(a => a.Name).ToList();
            Console.WriteLine("Animals sorted by name:");
            foreach (Animal a in sorted)
            {
                Console.WriteLine("ID: " + a.AnimalId + ", Name: " + a.Name + ", Type: " + a.Type + ", Age: " + a.Age);
            }
        }

        public void SearchByName(string name)
        {
            List<Animal> results = animals.Where(a => a.Name.Equals(name, StringComparison.OrdinalIgnoreCase)).ToList();
            if (results.Count == 0)
            {
                Console.WriteLine("No animal found with name '" + name + "'.");
            }
            else
            {
                Console.WriteLine("Search results for name '" + name + "':");
                foreach (Animal a in results)
                {
                    Console.WriteLine("ID: " + a.AnimalId + ", Name: " + a.Name + ", Type: " + a.Type + ", Age: " + a.Age);
                }
            }
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            AnimalManager manager = new AnimalManager();
            bool exit = false;

            while (!exit)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Animal");
                Console.WriteLine("2. Edit Animal");
                Console.WriteLine("3. Sort Animals by Name");
                Console.WriteLine("4. Search Animal by Name");
                Console.WriteLine("5. Exit");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        Console.Write("Enter Animal ID: ");
                        int id = int.Parse(Console.ReadLine());

                        Console.Write("Enter Name: ");
                        string name = Console.ReadLine();

                        Console.Write("Enter Type: ");
                        string type = Console.ReadLine();

                        Console.Write("Enter Age: ");
                        int age = int.Parse(Console.ReadLine());

                        Animal animal = new Animal();
                        animal.AnimalId = id;
                        animal.Name = name;
                        animal.Type = type;
                        animal.Age = age;

                        manager.AddAnimal(animal);
                        break;

                    case "2":
                        Console.Write("Enter Animal ID to edit: ");
                        int editId = int.Parse(Console.ReadLine());

                        Console.Write("Enter new name: ");
                        string newName = Console.ReadLine();

                        Console.Write("Enter new type: ");
                        string newType = Console.ReadLine();

                        Console.Write("Enter new age: ");
                        int newAge = int.Parse(Console.ReadLine());

                        manager.EditAnimal(editId, newName, newType, newAge);
                        break;

                    case "3":
                        manager.SortAnimalsByName();
                        break;

                    case "4":
                        Console.Write("Enter name to search: ");
                        string searchName = Console.ReadLine();
                        manager.SearchByName(searchName);
                        break;

                    case "5":
                        exit = true;
                        Console.WriteLine("Exiting program...");
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Try again.");
                        break;
                }
            }
        }
    }

    //==========================================================================
    // Uncomment the code below to use the Animal and AnimalManager classes with IEquatable interface



    //public class Animal : IEquatable<Animal>
    //{
    //    public int AnimalId { get; set; }
    //    public string Name { get; set; }
    //    public string Type { get; set; }
    //    public int Age { get; set; }

    //    public Animal()
    //    {
    //        Name = "";
    //        Type = "";
    //    }

    //    // Two animals are equal if their IDs are equal
    //    public bool Equals(Animal other)
    //    {
    //        if (other == null)
    //            return false;

    //        return this.AnimalId == other.AnimalId;
    //    }

    //    public override bool Equals(object obj)
    //    {
    //        return Equals(obj as Animal);
    //    }

    //    public override int GetHashCode()
    //    {
    //        return AnimalId.GetHashCode();
    //    }
    //}

    //public class AnimalManager
    //{
    //    private HashSet<Animal> animals = new HashSet<Animal>();

    //    public void AddAnimal(Animal animal)
    //    {
    //        if (!animals.Add(animal))
    //        {
    //            Console.WriteLine("An animal with ID " + animal.AnimalId + " already exists.");
    //        }
    //        else
    //        {
    //            Console.WriteLine("Animal added successfully.");
    //        }
    //    }

    //    public void EditAnimal(int animalId, string newName, string newType, int newAge)
    //    {
    //        Animal lookupAnimal = new Animal { AnimalId = animalId };
    //        Animal existingAnimal = null;

    //        foreach (Animal a in animals)
    //        {
    //            if (a.Equals(lookupAnimal))
    //            {
    //                existingAnimal = a;
    //                break;
    //            }
    //        }

    //        if (existingAnimal != null)
    //        {
    //            existingAnimal.Name = newName;
    //            existingAnimal.Type = newType;
    //            existingAnimal.Age = newAge;
    //            Console.WriteLine("Animal details updated successfully.");
    //        }
    //        else
    //        {
    //            Console.WriteLine("No animal found with ID " + animalId + ".");
    //        }
    //    }
    //}

    //class Program
    //{
    //    static void Main(string[] args)
    //    {
    //        AnimalManager animalManager = new AnimalManager();
    //        bool exit = false;

    //        while (!exit)
    //        {
    //            Console.WriteLine("\nMenu:");
    //            Console.WriteLine("1. Add Animal");
    //            Console.WriteLine("2. Edit Animal by ID");
    //            Console.WriteLine("3. Exit");
    //            Console.Write("Enter your choice: ");
    //            string input = Console.ReadLine();

    //            switch (input)
    //            {
    //                case "1":
    //                    Console.Write("Enter Animal ID: ");
    //                    int addId = int.Parse(Console.ReadLine());
    //                    Console.Write("Enter Animal Name: ");
    //                    string name = Console.ReadLine();
    //                    Console.Write("Enter Animal Type: ");
    //                    string type = Console.ReadLine();
    //                    Console.Write("Enter Animal Age: ");
    //                    int age = int.Parse(Console.ReadLine());

    //                    Animal newAnimal = new Animal();
    //                    newAnimal.AnimalId = addId;
    //                    newAnimal.Name = name;
    //                    newAnimal.Type = type;
    //                    newAnimal.Age = age;

    //                    animalManager.AddAnimal(newAnimal);
    //                    break;

    //                case "2":
    //                    Console.Write("Enter Animal ID: ");
    //                    int editId = int.Parse(Console.ReadLine());
    //                    Console.Write("Enter new name: ");
    //                    string newName = Console.ReadLine();
    //                    Console.Write("Enter new Animal type: ");
    //                    string newType = Console.ReadLine();
    //                    Console.Write("Enter new Animal age: ");
    //                    int newAge = int.Parse(Console.ReadLine());

    //                    animalManager.EditAnimal(editId, newName, newType, newAge);
    //                    break;

    //                case "3":
    //                    Console.WriteLine("Exiting program...");
    //                    exit = true;
    //                    break;

    //                default:
    //                    Console.WriteLine("Invalid choice, please try again.");
    //                    break;
    //            }
    //        }
    //    }
    //}
}


_____________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
 
public class Student
{
    public int StudentID {get;set;}
    public string Name {get;set;}
    public int Age {get;set;}
 
    public Student(int id, string name, int age)
    {
        StudentID=id;
        Name=name;
        Age=age;
    }
 
}
 
public class StudentManager
{
    public HashSet<Student> students {get;set;} = new HashSet<Student>();
 
    public void AddStudent(Student student)
    {
        var stu = students.FirstOrDefault(s=>s.StudentID==student.StudentID);
 
        if(stu == null){
            students.Add(student);
            Console.WriteLine("Student Added.");
        }
        else{
            Console.WriteLine("Already exists");
        }
 
    }
 
    public void DisplayStudent()
    {
        if(students.Count==0){
            Console.WriteLine("No Student available to display ");
        }
        else{
            foreach (var item in students)
            {
                Console.WriteLine($"StudentID: {item.StudentID}, Name: {item.Name}, Age: {item.Age} ");
               
            }
        }
 
    }
 
    public void UpdateStudent(int id, string newname, int newage)
    {
    var upd = students.FirstOrDefault(s=>s.StudentID==id);
    if(upd==null){
            Console.WriteLine("No Student available to update");
    }
    else{
        upd.Name=newname;
        upd.Age=newage;
        Console.WriteLine("successfully student details updated");
    }
       
 
    }
 
    public void SearchByName(string name)
    {
        var sname = students.Where(v=>v.Name==name).ToList();
        if(sname.Count==0)
        {
        Console.WriteLine("No Student name available to search");  
        return;        
        }
       
       
            foreach (var item in sname)
            {
                Console.WriteLine($"StudentID: {item.StudentID}, Name: {item.Name}, Age: {item.Age}");
               
            }
       
    }
 
    public void SearchByID(int id)
    {
        var sid = students.FirstOrDefault(s=>s.StudentID==id);
 
        if(sid==null)
        {        
        Console.WriteLine("No Student id available to search");          
        }
        else
        {
            foreach (var item in students)
            {
             Console.WriteLine($"StudentID: {item.StudentID}, Name: {item.Name}, Age: {item.Age}");              
            }
           
        }
 
       
    }
 
 
 
 
}
 
public class Program
{
    public static void Main(string[] args)
    {
        StudentManager manager = new StudentManager();
 
        Student s = new Student(1,"sharath", 21);
 
        // manager.AddStudent(s);
        // manager.DisplayStudent();
 
        // manager.UpdateStudent(1,"bharath", 23);
        // manager.DisplayStudent();
 
        // manager.SearchByID(3);
 
        manager.SearchByName("Charan");
 
 
 
 
 
 
 
 
    }
}

________________________________________________________________________________________________________________________________________________________________________________
