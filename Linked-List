using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MS_Practice_Collections
{

    
    public class Animal
    {
        public int AnimalId { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public int Age { get; set; }

        public Animal()
        {
            Name = "";
            Type = "";
        }
    }

    public class AnimalManager
    {
        private LinkedList<Animal> animals = new LinkedList<Animal>();//Create a property for the linked list of animals

        public void AddAnimal(Animal animal)
        {
            foreach (Animal a in animals)
            {
                if (a.AnimalId == animal.AnimalId)
                {
                    Console.WriteLine("An animal with ID " + animal.AnimalId + " already exists.");
                    return;
                }
            }

            animals.AddLast(animal);
            Console.WriteLine("Animal added successfully.");
        }

        public void EditAnimal(int animalId, string newName, string newType, int newAge)
        {
            foreach (Animal a in animals)
            {
                if (a.AnimalId == animalId)
                {
                    a.Name = newName;
                    a.Type = newType;
                    a.Age = newAge;
                    Console.WriteLine("Animal details updated successfully.");
                    return;
                }
            }

            Console.WriteLine("No animal found with ID " + animalId + ".");
        }

        public void SearchByName(string name)
        {
            bool found = false;
            foreach (Animal a in animals)
            {
                if (a.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine("ID: " + a.AnimalId + ", Name: " + a.Name + ", Type: " + a.Type + ", Age: " + a.Age);
                    found = true;
                }
            }

            if (!found)
            {
                Console.WriteLine("No animal found with name '" + name + "'.");
            }
        }

        public void ListAnimals()
        {
            if (animals.Count == 0)
            {
                Console.WriteLine("No animals in the list.");
                return;
            }

            Console.WriteLine("Animal List:");
            foreach (Animal a in animals)
            {
                Console.WriteLine("ID: " + a.AnimalId + ", Name: " + a.Name + ", Type: " + a.Type + ", Age: " + a.Age);
            }
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            AnimalManager manager = new AnimalManager();
            bool exit = false;

            while (!exit)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Animal");
                Console.WriteLine("2. Edit Animal by ID");
                Console.WriteLine("3. Search Animal by Name");
                Console.WriteLine("4. List All Animals");
                Console.WriteLine("5. Exit");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        Console.Write("Enter Animal ID: ");
                        int id = int.Parse(Console.ReadLine());

                        Console.Write("Enter Animal Name: ");
                        string name = Console.ReadLine();

                        Console.Write("Enter Animal Type: ");
                        string type = Console.ReadLine();

                        Console.Write("Enter Animal Age: ");
                        int age = int.Parse(Console.ReadLine());

                        Animal animal = new Animal();
                        animal.AnimalId = id;
                        animal.Name = name;
                        animal.Type = type;
                        animal.Age = age;

                        manager.AddAnimal(animal);
                        break;

                    case "2":
                        Console.Write("Enter Animal ID to edit: ");
                        int editId = int.Parse(Console.ReadLine());

                        Console.Write("Enter new name: ");
                        string newName = Console.ReadLine();

                        Console.Write("Enter new type: ");
                        string newType = Console.ReadLine();

                        Console.Write("Enter new age: ");
                        int newAge = int.Parse(Console.ReadLine());

                        manager.EditAnimal(editId, newName, newType, newAge);
                        break;

                    case "3":
                        Console.Write("Enter name to search: ");
                        string searchName = Console.ReadLine();
                        manager.SearchByName(searchName);
                        break;

                    case "4":
                        manager.ListAnimals();
                        break;

                    case "5":
                        exit = true;
                        Console.WriteLine("Exiting program...");
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Try again.");
                        break;
                }
            }
        }
    }
    
    //==========================================================================

    /*
    // ─────────────────────────────────────────────────────────────
    // 1.  Model
    // ─────────────────────────────────────────────────────────────
    public class Animal
    {
        public int AnimalId { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public int Age { get; set; }

        public Animal()
        {
            Name = string.Empty;
            Type = string.Empty;
        }
    }

    // ─────────────────────────────────────────────────────────────
    // 2.  Manager (LinkedList-based)
    // ─────────────────────────────────────────────────────────────
    public class AnimalManager
    {
        private readonly LinkedList<Animal> _animals = new LinkedList<Animal>();

        public void AddAnimal(Animal animal)
        {
            // Prevent duplicate IDs (linear scan; okay for small lists)
            if (_animals.Any(a => a.AnimalId == animal.AnimalId))
            {
                Console.WriteLine("An animal with ID {0} already exists.", animal.AnimalId);
                return;
            }

            _animals.AddLast(animal);
            Console.WriteLine("Animal added successfully.");
        }

        public void EditAnimal(int animalId, string newName, string newType, int newAge)
        {
            Animal existing = _animals.FirstOrDefault(a => a.AnimalId == animalId);
            if (existing != null)
            {
                existing.Name = newName;
                existing.Type = newType;
                existing.Age = newAge;
                Console.WriteLine("Animal details updated successfully.");
            }
            else
            {
                Console.WriteLine("No animal found with ID {0}.", animalId);
            }
        }

        /// <summary>
        /// Finds all animals whose Name matches (case-insensitive).
        /// </summary>
        public void SearchByName(string name)
        {
            List<Animal> matches = _animals
                .Where(a => a.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
                .ToList();

            if (matches.Count == 0)
            {
                Console.WriteLine("No animal found with name '{0}'.", name);
                return;
            }

            Console.WriteLine("Search results for '{0}':", name);
            foreach (Animal a in matches)
            {
                Console.WriteLine("ID: {0}, Name: {1}, Type: {2}, Age: {3}",
                                  a.AnimalId, a.Name, a.Type, a.Age);
            }
        }
    }

    // ─────────────────────────────────────────────────────────────
    // 3.  UI / Program loop
    // ─────────────────────────────────────────────────────────────
    class Program
    {
        static void Main(string[] args)
        {
            AnimalManager manager = new AnimalManager();
            bool exit = false;

            while (!exit)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Animal");
                Console.WriteLine("2. Edit Animal by ID");
                Console.WriteLine("3. Search Animal by Name");
                Console.WriteLine("4. Exit");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        Console.Write("Enter Animal ID: ");
                        int id = int.Parse(Console.ReadLine() ?? "0");

                        Console.Write("Enter Animal Name: ");
                        string name = Console.ReadLine();

                        Console.Write("Enter Animal Type: ");
                        string type = Console.ReadLine();

                        Console.Write("Enter Animal Age: ");
                        int age = int.Parse(Console.ReadLine() ?? "0");

                        manager.AddAnimal(new Animal
                        {
                            AnimalId = id,
                            Name = name,
                            Type = type,
                            Age = age
                        });
                        break;

                    case "2":
                        Console.Write("Enter Animal ID: ");
                        int editId = int.Parse(Console.ReadLine() ?? "0");

                        Console.Write("Enter new name: ");
                        string newName = Console.ReadLine();

                        Console.Write("Enter new type: ");
                        string newType = Console.ReadLine();

                        Console.Write("Enter new age: ");
                        int newAge = int.Parse(Console.ReadLine() ?? "0");

                        manager.EditAnimal(editId, newName, newType, newAge);
                        break;

                    case "3":
                        Console.Write("Enter name to search: ");
                        string searchName = Console.ReadLine();
                        manager.SearchByName(searchName);
                        break;

                    case "4":
                        Console.WriteLine("Exiting program...");
                        exit = true;
                        break;

                    default:
                        Console.WriteLine("Invalid choice, please try again.");
                        break;
                }
            }
        }
    }
    */
}
