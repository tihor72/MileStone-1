namespace dotnetapp.Models
{
    public class Car
    {
        public int CarID { get; set; }
        public string Make { get; set; }
        public string Model { get; set; }
        public DateTime DateAdded { get; set; }
    }
}


CREATE TABLE Cars (
    CarID INT PRIMARY KEY IDENTITY(1,1),
    Make NVARCHAR(50),
    Model NVARCHAR(50),
    DateAdded DATETIME
);

using System;
using System.Data;
using System.Data.SqlClient;
using dotnetapp.Models;

namespace dotnetapp
{
    public static class ConnectionStringProvider
    {
        public static string ConnectionString { get; } = "User ID=sa;password=examlyMssql@123;server=localhost;Database=appdb;trusted_connection=false;Persist Security Info=False;Encrypt=False";
    }

    public class Program
    {
        static string connectionString = ConnectionStringProvider.ConnectionString;

        public static void AddCar(Car car)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                DataRow dr = dt.NewRow();
                dr["Make"] = car.Make;
                dr["Model"] = car.Model;
                dr["DateAdded"] = car.DateAdded;

                dt.Rows.Add(dr);
                SqlCommandBuilder builder = new SqlCommandBuilder(adp);
                adp.Update(ds, "Cars");
                Console.WriteLine("Car added successfully.");
            }
        }

        public static void ListCars()
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                if (dt.Rows.Count == 0)
                {
                    Console.WriteLine("No cars available.");
                    return;
                }

                foreach (DataRow row in dt.Rows)
                {
                    Console.WriteLine($"{row["CarID"]}, {row["Make"]}, {row["Model"]}, {row["DateAdded"]}");
                }
            }
        }

        public static void DeleteCar(int carID)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                foreach (DataRow row in dt.Rows)
                {
                    if ((int)row["CarID"] == carID)
                    {
                        row.Delete();
                        break;
                    }
                }

                SqlCommandBuilder builder = new SqlCommandBuilder(adp);
                adp.Update(ds, "Cars");
                Console.WriteLine("Car deleted successfully.");
            }
        }

        public static void SearchCarWithMake(string make)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                foreach (DataRow row in dt.Rows)
                {
                    if (row["Make"].ToString().Equals(make, StringComparison.OrdinalIgnoreCase))
                    {
                        Console.WriteLine($"{row["CarID"]}, {row["Make"]}, {row["Model"]}, {row["DateAdded"]}");
                    }
                }
            }
        }

        public static void SearchCarWithModel(string model)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                foreach (DataRow row in dt.Rows)
                {
                    if (row["Model"].ToString().Equals(model, StringComparison.OrdinalIgnoreCase))
                    {
                        Console.WriteLine($"{row["CarID"]}, {row["Make"]}, {row["Model"]}, {row["DateAdded"]}");
                    }
                }
            }
        }

        public static void ShowTopNRecords(int n)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars ORDER BY DateAdded DESC", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                for (int i = 0; i < Math.Min(n, dt.Rows.Count); i++)
                {
                    DataRow row = dt.Rows[i];
                    Console.WriteLine($"{row["CarID"]}, {row["Make"]}, {row["Model"]}, {row["DateAdded"]}");
                }
            }
        }

        public static void ShowBottomNRecords(int n)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars ORDER BY DateAdded ASC", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                for (int i = 0; i < Math.Min(n, dt.Rows.Count); i++)
                {
                    DataRow row = dt.Rows[i];
                    Console.WriteLine($"{row["CarID"]}, {row["Make"]}, {row["Model"]}, {row["DateAdded"]}");
                }
            }
        }

        public static void ShowCarsInDateRange(DateTime startDate, DateTime endDate)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM Cars", con);
                DataSet ds = new DataSet();
                adp.Fill(ds, "Cars");
                DataTable dt = ds.Tables["Cars"];

                foreach (DataRow row in dt.Rows)
                {
                    DateTime date = Convert.ToDateTime(row["DateAdded"]);
                    if (date >= startDate && date <= endDate)
                    {
                        Console.WriteLine($"{row["CarID"]}, {row["Make"]}, {row["Model"]}, {row["DateAdded"]}");
                    }
                }
            }
        }

        public static void Main(string[] args)
        {
            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("\nMenu");
                Console.WriteLine("1 - Add Car");
                Console.WriteLine("2 - List Cars");
                Console.WriteLine("3 - Delete Car");
                Console.WriteLine("4 - SearchCarWithMake_Option1");
                Console.WriteLine("5 - SearchCarWithModel_Option1");
                Console.WriteLine("6 - Show Top n Records");
                Console.WriteLine("7 - Show Bottom n Records");
                Console.WriteLine("8 - Show Cars In Date Range");
                Console.WriteLine("9 - Exit");
                Console.Write("Enter your choice (1-9): ");

                int choice = int.Parse(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        Console.Write("Enter Make: ");
                        string make = Console.ReadLine();
                        Console.Write("Enter Model: ");
                        string model = Console.ReadLine();
                        Console.Write("Enter Date Added (yyyy-mm-dd): ");
                        DateTime dateAdded = DateTime.Parse(Console.ReadLine());

                        Car car = new Car { Make = make, Model = model, DateAdded = dateAdded };
                        AddCar(car);
                        break;

                    case 2:
                        ListCars();
                        break;

                    case 3:
                        Console.Write("Enter Car ID to delete: ");
                        int carID = int.Parse(Console.ReadLine());
                        DeleteCar(carID);
                        break;

                    case 4:
                        Console.Write("Enter Make to search: ");
                        string searchMake = Console.ReadLine();
                        SearchCarWithMake(searchMake);
                        break;

                    case 5:
                        Console.Write("Enter Model to search: ");
                        string searchModel = Console.ReadLine();
                        SearchCarWithModel(searchModel);
                        break;

                    case 6:
                        Console.Write("Enter number of top records to show: ");
                        int topN = int.Parse(Console.ReadLine());
                        ShowTopNRecords(topN);
                        break;

                    case 7:
                        Console.Write("Enter number of bottom records to show: ");
                        int bottomN = int.Parse(Console.ReadLine());
                        ShowBottomNRecords(bottomN);
                        break;

                    case 8:
                        Console.Write("Enter start date (yyyy-mm-dd): ");
                        DateTime startDate = DateTime.Parse(Console.ReadLine());
                        Console.Write("Enter end date (yyyy-mm-dd): ");
                        DateTime endDate = DateTime.Parse(Console.ReadLine());
                        ShowCarsInDateRange(startDate, endDate);
                        break;

                    case 9:
                        Console.WriteLine("Exiting the application...");
                        exit = true;
                        break;

                    default:
                                               break;
                }
            }
        }
    }
}
